"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    id: 'h1-require',
    description: '<h1> must be present in <body> tag and not be empty.',
    init(parser, reporter) {
        let bodyDepth = 0;
        let hasH1InBody = false;
        let bodyTagEvent = null;
        let currentH1Event = null;
        let h1IsEmpty = false;
        const onTagStart = (event) => {
            const tagName = event.tagName.toLowerCase();
            if (tagName === 'body') {
                bodyDepth++;
                if (bodyDepth === 1) {
                    hasH1InBody = false;
                    bodyTagEvent = event;
                }
            }
            else if (tagName === 'h1' && bodyDepth > 0) {
                hasH1InBody = true;
                currentH1Event = event;
                h1IsEmpty = true;
            }
        };
        const onText = (event) => {
            if (currentH1Event && h1IsEmpty) {
                if (event.raw && !/^\s*$/.test(event.raw)) {
                    h1IsEmpty = false;
                }
            }
        };
        const onTagEnd = (event) => {
            const tagName = event.tagName.toLowerCase();
            if (tagName === 'h1' && currentH1Event) {
                if (h1IsEmpty) {
                    reporter.warn('<h1> tag must not be empty.', currentH1Event.line, currentH1Event.col, this, currentH1Event.raw);
                }
                currentH1Event = null;
            }
            else if (tagName === 'body') {
                if (bodyDepth === 1 && !hasH1InBody && bodyTagEvent) {
                    reporter.warn('<h1> must be present in <body> tag.', bodyTagEvent.line, bodyTagEvent.col, this, bodyTagEvent.raw);
                }
                bodyDepth--;
                if (bodyDepth < 0)
                    bodyDepth = 0;
            }
        };
        parser.addListener('tagstart', onTagStart);
        parser.addListener('tagend', onTagEnd);
        parser.addListener('text', onText);
        parser.addListener('end', () => {
            if (bodyDepth > 0 && !hasH1InBody && bodyTagEvent) {
                reporter.warn('<h1> must be present in <body> tag.', bodyTagEvent.line, bodyTagEvent.col, this, bodyTagEvent.raw);
            }
        });
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaDEtcmVxdWlyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL3J1bGVzL2gxLXJlcXVpcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxrQkFBZTtJQUNiLEVBQUUsRUFBRSxZQUFZO0lBQ2hCLFdBQVcsRUFBRSxzREFBc0Q7SUFDbkUsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRO1FBQ25CLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQTtRQUNqQixJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUE7UUFDdkIsSUFBSSxZQUFZLEdBQWlCLElBQUksQ0FBQTtRQUNyQyxJQUFJLGNBQWMsR0FBaUIsSUFBSSxDQUFBO1FBQ3ZDLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQTtRQUVyQixNQUFNLFVBQVUsR0FBYSxDQUFDLEtBQVksRUFBRSxFQUFFO1lBQzVDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDM0MsSUFBSSxPQUFPLEtBQUssTUFBTSxFQUFFO2dCQUN0QixTQUFTLEVBQUUsQ0FBQTtnQkFDWCxJQUFJLFNBQVMsS0FBSyxDQUFDLEVBQUU7b0JBQ25CLFdBQVcsR0FBRyxLQUFLLENBQUE7b0JBQ25CLFlBQVksR0FBRyxLQUFLLENBQUE7aUJBQ3JCO2FBQ0Y7aUJBQU0sSUFBSSxPQUFPLEtBQUssSUFBSSxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUU7Z0JBQzVDLFdBQVcsR0FBRyxJQUFJLENBQUE7Z0JBQ2xCLGNBQWMsR0FBRyxLQUFLLENBQUE7Z0JBQ3RCLFNBQVMsR0FBRyxJQUFJLENBQUE7YUFDakI7UUFDSCxDQUFDLENBQUE7UUFFRCxNQUFNLE1BQU0sR0FBYSxDQUFDLEtBQVksRUFBRSxFQUFFO1lBRXhDLElBQUksY0FBYyxJQUFJLFNBQVMsRUFBRTtnQkFDL0IsSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ3pDLFNBQVMsR0FBRyxLQUFLLENBQUE7aUJBQ2xCO2FBQ0Y7UUFDSCxDQUFDLENBQUE7UUFFRCxNQUFNLFFBQVEsR0FBYSxDQUFDLEtBQVksRUFBRSxFQUFFO1lBQzFDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDM0MsSUFBSSxPQUFPLEtBQUssSUFBSSxJQUFJLGNBQWMsRUFBRTtnQkFDdEMsSUFBSSxTQUFTLEVBQUU7b0JBQ2IsUUFBUSxDQUFDLElBQUksQ0FDWCw2QkFBNkIsRUFDN0IsY0FBYyxDQUFDLElBQUksRUFDbkIsY0FBYyxDQUFDLEdBQUcsRUFDbEIsSUFBSSxFQUNKLGNBQWMsQ0FBQyxHQUFHLENBQ25CLENBQUE7aUJBQ0Y7Z0JBQ0QsY0FBYyxHQUFHLElBQUksQ0FBQTthQUN0QjtpQkFBTSxJQUFJLE9BQU8sS0FBSyxNQUFNLEVBQUU7Z0JBQzdCLElBQUksU0FBUyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxZQUFZLEVBQUU7b0JBQ25ELFFBQVEsQ0FBQyxJQUFJLENBQ1gscUNBQXFDLEVBQ3JDLFlBQVksQ0FBQyxJQUFJLEVBQ2pCLFlBQVksQ0FBQyxHQUFHLEVBQ2hCLElBQUksRUFDSixZQUFZLENBQUMsR0FBRyxDQUNqQixDQUFBO2lCQUNGO2dCQUNELFNBQVMsRUFBRSxDQUFBO2dCQUNYLElBQUksU0FBUyxHQUFHLENBQUM7b0JBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQTthQUNqQztRQUNILENBQUMsQ0FBQTtRQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQzFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3RDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ2xDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtZQUU3QixJQUFJLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksWUFBWSxFQUFFO2dCQUNqRCxRQUFRLENBQUMsSUFBSSxDQUNYLHFDQUFxQyxFQUNyQyxZQUFZLENBQUMsSUFBSSxFQUNqQixZQUFZLENBQUMsR0FBRyxFQUNoQixJQUFJLEVBQ0osWUFBWSxDQUFDLEdBQUcsQ0FDakIsQ0FBQTthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0NBQ00sQ0FBQSJ9